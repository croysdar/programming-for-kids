{"version":3,"sources":["Editor.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","props","workspaceDidChange","workspace","require","code","Blockly","Python","workspaceToCode","document","getElementById","value","render","BlocklyEditor","toolboxCategories","state","workspaceConfiguration","grid","spacing","length","colour","snap","initialXml","ConfigFiles","INITIAL_XML","wrapperDivClassName","parseWorkspaceXml","INITIAL_TOOLBOX_XML","React","Component","window","addEventListener","e","alert","editor","createElement","ReactDOM","App","className","style","height","width","id","disabled","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUASMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAqCRC,mBAAqB,SAACC,GAcpBC,EAAQ,IACR,IAAMC,EAAOC,IAAQC,OAAOC,gBAAgBL,GAC5CM,SAASC,eAAe,QAAQC,MAAQN,GAtDvB,EAyDnBO,OAAS,kBACP,kBAAC,IAAsBC,cAAvB,CAEEC,kBAAmB,EAAKC,MAAMD,kBAE9BE,uBAAwB,CACtBC,KAAM,CACJC,QAAS,GACTC,OAAQ,EACRC,OAAQ,OACRC,MAAM,IAIVC,WAAYC,IAAYC,YAExBC,oBAAoB,cAEpBvB,mBAAoB,EAAKA,sBAzE3B,EAAKa,MAAQ,CACXD,kBAAmBY,YAAkBH,IAAYI,sBAHlC,E,2BADAC,IAAMC,WAkF3BC,OAAOC,iBAAiB,QAAQ,WACbtB,SAASC,eAAe,eAmBhCqB,iBAAiB,SAAS,SAASC,GACtCC,MAAMxB,SAASC,eAAe,QAAQC,UAE1C,IAAMuB,EAASN,IAAMO,cAAcnC,GACnCoC,IAASxB,OAAOsB,EAAQzB,SAASC,eAAe,gB,wFCpGrC2B,MAZf,WACE,OACE,yBAAKC,UAAU,OAEf,yBAAKC,MAAO,CAACC,OAAQ,QAASC,MAAO,SAAUC,GAAG,YAClD,8BAAUC,SAAS,MAAMD,GAAG,OAAOH,MAAO,CAACC,OAAQ,QAASC,MAAO,SAAU9B,MAAM,KACnF,4BAAQ+B,GAAG,eAAX,gBCGgBE,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZN3C,EAAQ,IACRgC,IAASxB,OAAO,kBAAC,EAAD,MAASH,SAASC,eAAe,SD4H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3798643c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Blockly from 'blockly';\n\n\nimport ReactBlocklyComponent from 'react-blockly';\nimport ConfigFiles from 'react-blockly/src/initContent/content';\nimport parseWorkspaceXml from 'react-blockly/src/BlocklyHelper';\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toolboxCategories: parseWorkspaceXml(ConfigFiles.INITIAL_TOOLBOX_XML),\n    };\n  }\n\n//this is optional for adding custom categories of blocks\n/*\ncomponentDidMount = () => {\n    window.setTimeout(() => {\n      this.setState({\n        toolboxCategories: this.state.toolboxCategories.concat([\n          {\n            name: 'AI category',\n            blocks: [\n              { type: 'text' },\n              { type: 'text_print'},\n              {\n                type: 'text_print',\n                values: {\n                  TEXT: {\n                    type: 'text',\n                    shadow: false,\n                    fields: {\n                      TEXT: 'Preloaded example text uwu',\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        ]),\n      });\n    }, 2000);\n  }\n*/\n\n  workspaceDidChange = (workspace) => {\n      //this part you can do something when the workspace changes (when they place or move a block)\n    /*\n      workspace.registerButtonCallback('sendToGrade', () => {\n      alert('Sent to grading script');\n    });\n    */\n    //We can use this for saving user's progress\n    /*\n    const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n    document.getElementById('generated-xml').innerText = newXml;\n    */\n    //this prints out the blocks to actual python code to the page.\n    //TODO send the const code to backend for grading\n    require('blockly/python');\n    const code = Blockly.Python.workspaceToCode(workspace);\n    document.getElementById('code').value = code;\n  }\n\n  render = () => (\n    <ReactBlocklyComponent.BlocklyEditor\n        // The block categories to be available.\n      toolboxCategories={this.state.toolboxCategories}\n      //this is obvious what it does\n      workspaceConfiguration={{\n        grid: {\n          spacing: 20,\n          length: 3,\n          colour: '#ccc',\n          snap: true,\n        },\n      }}\n      //we can possibly change the initial xml on a per lesson basis... or not\n      initialXml={ConfigFiles.INITIAL_XML}\n      //the div wrapper that will be generated for blockly\n      wrapperDivClassName=\"fill-height\"\n      //what method to call when the workspace changes\n      workspaceDidChange={this.workspaceDidChange}\n    />\n  )\n}\n\n//on load we create an element of the class created above and insert into the element 'blockly'\nwindow.addEventListener('load', () => {\n    const button = document.getElementById('gradeButton');\n\n    //const util = require('util');\n    //const execFile = util.promisify(require('child_process').execFile);\n    //async function runTest() {\n    //const { stdout } = await execFile('node', ['--version']);\n    //    console.log('stdout: ', stdout);\n    //}\n    //runTest();\n    //const { exec } = require('child_process').exec;\n    //exec('echo \"The \\\\$Home variable is $HOME\"', (error, stdout, stderr) => {\n    //  if (error) {\n    //    console.error('exec error: ${error}');\n    //    return;\n    //  }\n    //  console.log('stdout: ${stdout}');\n    //  console.error('stderr: ${stderr}');\n    //});\n    \n    button.addEventListener('click', function(e) {\n        alert(document.getElementById('code').value);\n    });\n    const editor = React.createElement(Editor);\n    ReactDOM.render(editor, document.getElementById('blockly'));\n});\n","import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    <div style={{height: \"600px\", width: \"800px\"}} id=\"blockly\"></div>\n    <textarea disabled=\"yes\" id=\"code\" style={{height: \"200px\", width: \"400px\"}} value=\"\"></textarea>\n    <button id=\"gradeButton\">Grade code</button>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('./Editor.jsx');\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}